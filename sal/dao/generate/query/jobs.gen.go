// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"miner_core/sal/dao/generate/model"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newJobPO(db *gorm.DB, opts ...gen.DOOption) jobPO {
	_jobPO := jobPO{}

	_jobPO.jobPODo.UseDB(db, opts...)
	_jobPO.jobPODo.UseModel(&model.JobPO{})

	tableName := _jobPO.jobPODo.TableName()
	_jobPO.ALL = field.NewAsterisk(tableName)
	_jobPO.ID = field.NewInt64(tableName, "id")
	_jobPO.Name = field.NewString(tableName, "name")
	_jobPO.Description = field.NewString(tableName, "description")
	_jobPO.CreatedBy = field.NewInt64(tableName, "created_by")
	_jobPO.UpdatedBy = field.NewInt64(tableName, "updated_by")
	_jobPO.Extra = field.NewString(tableName, "extra")
	_jobPO.CreatedAt = field.NewTime(tableName, "created_at")
	_jobPO.UpdatedAt = field.NewTime(tableName, "updated_at")
	_jobPO.DeletedAt = field.NewField(tableName, "deleted_at")

	_jobPO.fillFieldMap()

	return _jobPO
}

type jobPO struct {
	jobPODo

	ALL         field.Asterisk
	ID          field.Int64
	Name        field.String
	Description field.String
	CreatedBy   field.Int64
	UpdatedBy   field.Int64
	Extra       field.String
	CreatedAt   field.Time
	UpdatedAt   field.Time
	DeletedAt   field.Field

	fieldMap map[string]field.Expr
}

func (j jobPO) Table(newTableName string) *jobPO {
	j.jobPODo.UseTable(newTableName)
	return j.updateTableName(newTableName)
}

func (j jobPO) As(alias string) *jobPO {
	j.jobPODo.DO = *(j.jobPODo.As(alias).(*gen.DO))
	return j.updateTableName(alias)
}

func (j *jobPO) updateTableName(table string) *jobPO {
	j.ALL = field.NewAsterisk(table)
	j.ID = field.NewInt64(table, "id")
	j.Name = field.NewString(table, "name")
	j.Description = field.NewString(table, "description")
	j.CreatedBy = field.NewInt64(table, "created_by")
	j.UpdatedBy = field.NewInt64(table, "updated_by")
	j.Extra = field.NewString(table, "extra")
	j.CreatedAt = field.NewTime(table, "created_at")
	j.UpdatedAt = field.NewTime(table, "updated_at")
	j.DeletedAt = field.NewField(table, "deleted_at")

	j.fillFieldMap()

	return j
}

func (j *jobPO) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := j.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (j *jobPO) fillFieldMap() {
	j.fieldMap = make(map[string]field.Expr, 9)
	j.fieldMap["id"] = j.ID
	j.fieldMap["name"] = j.Name
	j.fieldMap["description"] = j.Description
	j.fieldMap["created_by"] = j.CreatedBy
	j.fieldMap["updated_by"] = j.UpdatedBy
	j.fieldMap["extra"] = j.Extra
	j.fieldMap["created_at"] = j.CreatedAt
	j.fieldMap["updated_at"] = j.UpdatedAt
	j.fieldMap["deleted_at"] = j.DeletedAt
}

func (j jobPO) clone(db *gorm.DB) jobPO {
	j.jobPODo.ReplaceConnPool(db.Statement.ConnPool)
	return j
}

func (j jobPO) replaceDB(db *gorm.DB) jobPO {
	j.jobPODo.ReplaceDB(db)
	return j
}

type jobPODo struct{ gen.DO }

type IJobPODo interface {
	gen.SubQuery
	Debug() IJobPODo
	WithContext(ctx context.Context) IJobPODo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IJobPODo
	WriteDB() IJobPODo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IJobPODo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IJobPODo
	Not(conds ...gen.Condition) IJobPODo
	Or(conds ...gen.Condition) IJobPODo
	Select(conds ...field.Expr) IJobPODo
	Where(conds ...gen.Condition) IJobPODo
	Order(conds ...field.Expr) IJobPODo
	Distinct(cols ...field.Expr) IJobPODo
	Omit(cols ...field.Expr) IJobPODo
	Join(table schema.Tabler, on ...field.Expr) IJobPODo
	LeftJoin(table schema.Tabler, on ...field.Expr) IJobPODo
	RightJoin(table schema.Tabler, on ...field.Expr) IJobPODo
	Group(cols ...field.Expr) IJobPODo
	Having(conds ...gen.Condition) IJobPODo
	Limit(limit int) IJobPODo
	Offset(offset int) IJobPODo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IJobPODo
	Unscoped() IJobPODo
	Create(values ...*model.JobPO) error
	CreateInBatches(values []*model.JobPO, batchSize int) error
	Save(values ...*model.JobPO) error
	First() (*model.JobPO, error)
	Take() (*model.JobPO, error)
	Last() (*model.JobPO, error)
	Find() ([]*model.JobPO, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.JobPO, err error)
	FindInBatches(result *[]*model.JobPO, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.JobPO) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IJobPODo
	Assign(attrs ...field.AssignExpr) IJobPODo
	Joins(fields ...field.RelationField) IJobPODo
	Preload(fields ...field.RelationField) IJobPODo
	FirstOrInit() (*model.JobPO, error)
	FirstOrCreate() (*model.JobPO, error)
	FindByPage(offset int, limit int) (result []*model.JobPO, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IJobPODo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (j jobPODo) Debug() IJobPODo {
	return j.withDO(j.DO.Debug())
}

func (j jobPODo) WithContext(ctx context.Context) IJobPODo {
	return j.withDO(j.DO.WithContext(ctx))
}

func (j jobPODo) ReadDB() IJobPODo {
	return j.Clauses(dbresolver.Read)
}

func (j jobPODo) WriteDB() IJobPODo {
	return j.Clauses(dbresolver.Write)
}

func (j jobPODo) Session(config *gorm.Session) IJobPODo {
	return j.withDO(j.DO.Session(config))
}

func (j jobPODo) Clauses(conds ...clause.Expression) IJobPODo {
	return j.withDO(j.DO.Clauses(conds...))
}

func (j jobPODo) Returning(value interface{}, columns ...string) IJobPODo {
	return j.withDO(j.DO.Returning(value, columns...))
}

func (j jobPODo) Not(conds ...gen.Condition) IJobPODo {
	return j.withDO(j.DO.Not(conds...))
}

func (j jobPODo) Or(conds ...gen.Condition) IJobPODo {
	return j.withDO(j.DO.Or(conds...))
}

func (j jobPODo) Select(conds ...field.Expr) IJobPODo {
	return j.withDO(j.DO.Select(conds...))
}

func (j jobPODo) Where(conds ...gen.Condition) IJobPODo {
	return j.withDO(j.DO.Where(conds...))
}

func (j jobPODo) Order(conds ...field.Expr) IJobPODo {
	return j.withDO(j.DO.Order(conds...))
}

func (j jobPODo) Distinct(cols ...field.Expr) IJobPODo {
	return j.withDO(j.DO.Distinct(cols...))
}

func (j jobPODo) Omit(cols ...field.Expr) IJobPODo {
	return j.withDO(j.DO.Omit(cols...))
}

func (j jobPODo) Join(table schema.Tabler, on ...field.Expr) IJobPODo {
	return j.withDO(j.DO.Join(table, on...))
}

func (j jobPODo) LeftJoin(table schema.Tabler, on ...field.Expr) IJobPODo {
	return j.withDO(j.DO.LeftJoin(table, on...))
}

func (j jobPODo) RightJoin(table schema.Tabler, on ...field.Expr) IJobPODo {
	return j.withDO(j.DO.RightJoin(table, on...))
}

func (j jobPODo) Group(cols ...field.Expr) IJobPODo {
	return j.withDO(j.DO.Group(cols...))
}

func (j jobPODo) Having(conds ...gen.Condition) IJobPODo {
	return j.withDO(j.DO.Having(conds...))
}

func (j jobPODo) Limit(limit int) IJobPODo {
	return j.withDO(j.DO.Limit(limit))
}

func (j jobPODo) Offset(offset int) IJobPODo {
	return j.withDO(j.DO.Offset(offset))
}

func (j jobPODo) Scopes(funcs ...func(gen.Dao) gen.Dao) IJobPODo {
	return j.withDO(j.DO.Scopes(funcs...))
}

func (j jobPODo) Unscoped() IJobPODo {
	return j.withDO(j.DO.Unscoped())
}

func (j jobPODo) Create(values ...*model.JobPO) error {
	if len(values) == 0 {
		return nil
	}
	return j.DO.Create(values)
}

func (j jobPODo) CreateInBatches(values []*model.JobPO, batchSize int) error {
	return j.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (j jobPODo) Save(values ...*model.JobPO) error {
	if len(values) == 0 {
		return nil
	}
	return j.DO.Save(values)
}

func (j jobPODo) First() (*model.JobPO, error) {
	if result, err := j.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.JobPO), nil
	}
}

func (j jobPODo) Take() (*model.JobPO, error) {
	if result, err := j.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.JobPO), nil
	}
}

func (j jobPODo) Last() (*model.JobPO, error) {
	if result, err := j.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.JobPO), nil
	}
}

func (j jobPODo) Find() ([]*model.JobPO, error) {
	result, err := j.DO.Find()
	return result.([]*model.JobPO), err
}

func (j jobPODo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.JobPO, err error) {
	buf := make([]*model.JobPO, 0, batchSize)
	err = j.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (j jobPODo) FindInBatches(result *[]*model.JobPO, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return j.DO.FindInBatches(result, batchSize, fc)
}

func (j jobPODo) Attrs(attrs ...field.AssignExpr) IJobPODo {
	return j.withDO(j.DO.Attrs(attrs...))
}

func (j jobPODo) Assign(attrs ...field.AssignExpr) IJobPODo {
	return j.withDO(j.DO.Assign(attrs...))
}

func (j jobPODo) Joins(fields ...field.RelationField) IJobPODo {
	for _, _f := range fields {
		j = *j.withDO(j.DO.Joins(_f))
	}
	return &j
}

func (j jobPODo) Preload(fields ...field.RelationField) IJobPODo {
	for _, _f := range fields {
		j = *j.withDO(j.DO.Preload(_f))
	}
	return &j
}

func (j jobPODo) FirstOrInit() (*model.JobPO, error) {
	if result, err := j.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.JobPO), nil
	}
}

func (j jobPODo) FirstOrCreate() (*model.JobPO, error) {
	if result, err := j.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.JobPO), nil
	}
}

func (j jobPODo) FindByPage(offset int, limit int) (result []*model.JobPO, count int64, err error) {
	result, err = j.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = j.Offset(-1).Limit(-1).Count()
	return
}

func (j jobPODo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = j.Count()
	if err != nil {
		return
	}

	err = j.Offset(offset).Limit(limit).Scan(result)
	return
}

func (j jobPODo) Scan(result interface{}) (err error) {
	return j.DO.Scan(result)
}

func (j jobPODo) Delete(models ...*model.JobPO) (result gen.ResultInfo, err error) {
	return j.DO.Delete(models)
}

func (j *jobPODo) withDO(do gen.Dao) *jobPODo {
	j.DO = *do.(*gen.DO)
	return j
}
